
"""
dtlsr.py: defines services provided by the collection of protocols
"""
from typing import Tuple
import netaddr
from core.nodes.base import CoreNode
from core.services.coreservices import CoreService


def addrstr(ip: netaddr.IPNetwork) -> str:
  """
  helper for mapping IP addresses to config statements
  """
  address = str(ip.ip)
  if netaddr.valid_ipv4(address):
      return "ip address %s" % ip
  elif netaddr.valid_ipv6(address):
      return "ipv6 address %s" % ip
  else:
      raise ValueError("invalid address: %s", ip)


class DTLSR(CoreService):
  name: str = "DTLSR"
  group: str = "DTLSR"

  configs: Tuple[str, ...] = ("dtlsr.id", "dtlsrboot.sh", )
  startup: Tuple[str, ...] = ("bash dtlsrboot.sh", )

  @classmethod
  def generate_config(cls, node: CoreNode, filename: str) -> None:
    if filename == cls.configs[0]:
      return cls.generate_id(node)
    elif filename == cls.configs[1]:
      return cls.generate_boot()
    else:
      raise ValueError("file name (%s) is not a known configuration: %s",
                       filename, cls.configs)

  @classmethod
  def generate_id(cls, node: CoreNode) -> str:
    cfg = "{}".format(node.id)
    return cfg

  @classmethod
  def generate_boot(cls) -> str:
    """
    Generate shell script used to boot the daemons
    """
    return """\
#!/bin/sh
# auto-generated by dtlsr service (dtlsr.py)

/home/ben/projects/routing/bin/dtlsr -d

"""

class Heartbeat(CoreService):
  name: str = "Heartbeat"
  group: str = "DTLSR"

  configs: Tuple[str, ...] = ("hbt.id", "hbtboot.sh", )
  startup: Tuple[str, ...] = ("bash hbtboot.sh", )
  validate: Tuple[str, ...] = ("pidof -z heartbeat", )

  @classmethod
  def generate_config(cls, node: CoreNode, filename: str) -> None:
    if filename == cls.configs[0]:
      return cls.generate_id(node)
    elif filename == cls.configs[1]:
      return cls.generate_boot()
    else:
      raise ValueError("file name (%s) is not a known configuration: %s",
                       filename, cls.configs)

  @classmethod
  def generate_id(cls, node: CoreNode) -> str:
    cfg = "{}".format(node.id)
    return cfg

  @classmethod
  def generate_boot(cls) -> str:
    """
    Generate shell script used to boot the daemons
    """
    return """\
#!/bin/sh
# auto-generated by heartbeat service (dtlsr.py)

/home/ben/projects/routing/bin/heartbeat -d

"""
